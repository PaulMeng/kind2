### Starting build.
# Target: kind2.ml.depends, tags: { annot, debug, extension:ml, file:kind2.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules kind2.ml > kind2.ml.depends
# Target: bmc.mli.depends, tags: { extension:mli, file:bmc.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules bmc.mli > bmc.mli.depends
# Target: transSys.mli.depends, tags: { extension:mli, file:transSys.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules transSys.mli > transSys.mli.depends
# Target: SMTExpr.mli.depends, tags: { extension:mli, file:SMTExpr.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SMTExpr.mli > SMTExpr.mli.depends
# Target: hStringSExpr.ml.depends, tags: { annot, debug, extension:ml, file:hStringSExpr.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules hStringSExpr.ml > hStringSExpr.ml.depends
# Target: hString.mli.depends, tags: { extension:mli, file:hString.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules hString.mli > hString.mli.depends
# Target: SExprBase.mli.depends, tags: { extension:mli, file:SExprBase.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SExprBase.mli > SExprBase.mli.depends
# Target: hString.cmi, tags: { byte, compile, extension:mli, file:hString.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o hString.cmi hString.mli
# Target: SExprBase.cmi, tags: { byte, compile, extension:mli, file:SExprBase.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SExprBase.cmi SExprBase.mli
# Target: term.mli.depends, tags: { extension:mli, file:term.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules term.mli > term.mli.depends
# Target: lib.mli.depends, tags: { extension:mli, file:lib.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules lib.mli > lib.mli.depends
# Target: ltree.mli.depends, tags: { extension:mli, file:ltree.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules ltree.mli > ltree.mli.depends
# Target: hashcons.mli.depends, tags: { extension:mli, file:hashcons.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules hashcons.mli > hashcons.mli.depends
# Target: hashcons.cmi, tags: { byte, compile, extension:mli, file:hashcons.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o hashcons.cmi hashcons.mli
# Target: symbol.mli.depends, tags: { extension:mli, file:symbol.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules symbol.mli > symbol.mli.depends
# Target: lib.cmi, tags: { byte, compile, extension:mli, file:lib.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o lib.cmi lib.mli
# Target: ufSymbol.mli.depends, tags: { extension:mli, file:ufSymbol.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules ufSymbol.mli > ufSymbol.mli.depends
# Target: type.mli.depends, tags: { extension:mli, file:type.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules type.mli > type.mli.depends
# Target: type.cmi, tags: { byte, compile, extension:mli, file:type.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o type.cmi type.mli
# Target: ufSymbol.cmi, tags: { byte, compile, extension:mli, file:ufSymbol.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o ufSymbol.cmi ufSymbol.mli
# Target: var.mli.depends, tags: { extension:mli, file:var.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules var.mli > var.mli.depends
# Target: stateVar.mli.depends, tags: { extension:mli, file:stateVar.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules stateVar.mli > stateVar.mli.depends
# Target: stateVar.cmi, tags: { byte, compile, extension:mli, file:stateVar.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o stateVar.cmi stateVar.mli
# Target: ltree.cmi, tags: { byte, compile, extension:mli, file:ltree.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o ltree.cmi ltree.mli
# Target: symbol.cmi, tags: { byte, compile, extension:mli, file:symbol.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o symbol.cmi symbol.mli
# Target: var.cmi, tags: { byte, compile, extension:mli, file:var.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o var.cmi var.mli
# Target: hStringSExpr.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:hStringSExpr.cmo, file:hStringSExpr.ml, implem, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o hStringSExpr.cmo hStringSExpr.ml
# Target: term.cmi, tags: { byte, compile, extension:mli, file:term.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o term.cmi term.mli
# Target: SMTExpr.cmi, tags: { byte, compile, extension:mli, file:SMTExpr.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SMTExpr.cmi SMTExpr.mli
# Target: transSys.cmi, tags: { byte, compile, extension:mli, file:transSys.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o transSys.cmi transSys.mli
# Target: config.ml.depends, tags: { annot, debug, extension:ml, file:config.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules config.ml > config.ml.depends
# Target: SMTLIBSolver.mli.depends, tags: { extension:mli, file:SMTLIBSolver.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SMTLIBSolver.mli > SMTLIBSolver.mli.depends
# Target: SMTLIBSolver.cmi, tags: { byte, compile, extension:mli, file:SMTLIBSolver.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SMTLIBSolver.cmi SMTLIBSolver.mli
# Target: debug.mli.depends, tags: { extension:mli, file:debug.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules debug.mli > debug.mli.depends
# Target: event.mli.depends, tags: { extension:mli, file:event.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules event.mli > event.mli.depends
# Target: stat.mli.depends, tags: { extension:mli, file:stat.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules stat.mli > stat.mli.depends
# Target: stat.cmi, tags: { byte, compile, extension:mli, file:stat.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o stat.cmi stat.mli
# Target: flags.mli.depends, tags: { extension:mli, file:flags.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules flags.mli > flags.mli.depends
# Target: event.cmi, tags: { byte, compile, extension:mli, file:event.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o event.cmi event.mli
# Target: ind.mli.depends, tags: { extension:mli, file:ind.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules ind.mli > ind.mli.depends
# Target: interpreter.mli.depends, tags: { extension:mli, file:interpreter.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules interpreter.mli > interpreter.mli.depends
# Target: invGenDummy.mli.depends, tags: { extension:mli, file:invGenDummy.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules invGenDummy.mli > invGenDummy.mli.depends
# Target: invarManager.mli.depends, tags: { extension:mli, file:invarManager.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules invarManager.mli > invarManager.mli.depends
# Target: oldParser.mli.depends, tags: { extension:mli, file:oldParser.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules oldParser.mli > oldParser.mli.depends
# Target: kind1/channels.mli.depends, tags: { extension:mli, file:kind1/channels.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/channels.mli > kind1/channels.mli.depends
# Target: kind1/types.mli.depends, tags: { extension:mli, file:kind1/types.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/types.mli > kind1/types.mli.depends
# Target: kind1/types.cmi, tags: { byte, compile, extension:mli, file:kind1/types.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/types.cmi kind1/types.mli
# Target: kind1/channels.cmi, tags: { byte, compile, extension:mli, file:kind1/channels.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/channels.cmi kind1/channels.mli
# Target: kind1/channels.ml.depends, tags: { annot, debug, extension:ml, file:kind1/channels.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/channels.ml > kind1/channels.ml.depends
# Target: kind1/oldFlags.mli.depends, tags: { extension:mli, file:kind1/oldFlags.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/oldFlags.mli > kind1/oldFlags.mli.depends
# Target: kind1/oldFlags.cmi, tags: { byte, compile, extension:mli, file:kind1/oldFlags.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/oldFlags.cmi kind1/oldFlags.mli
# Target: kind1/coi.mli.depends, tags: { extension:mli, file:kind1/coi.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/coi.mli > kind1/coi.mli.depends
# Target: kind1/coi.cmi, tags: { byte, compile, extension:mli, file:kind1/coi.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/coi.cmi kind1/coi.mli
# Target: kind1/coi.ml.depends, tags: { annot, debug, extension:ml, file:kind1/coi.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/coi.ml > kind1/coi.ml.depends
# Target: kind1/exceptions.mli.depends, tags: { extension:mli, file:kind1/exceptions.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/exceptions.mli > kind1/exceptions.mli.depends
# Target: kind1/globals.mli.depends, tags: { extension:mli, file:kind1/globals.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/globals.mli > kind1/globals.mli.depends
# Target: kind1/solver_base.mli.depends, tags: { extension:mli, file:kind1/solver_base.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/solver_base.mli > kind1/solver_base.mli.depends
# Target: kind1/solver_base.cmi, tags: { byte, compile, extension:mli, file:kind1/solver_base.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/solver_base.cmi kind1/solver_base.mli
# Target: kind1/lus_convert.mli.depends, tags: { extension:mli, file:kind1/lus_convert.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lus_convert.mli > kind1/lus_convert.mli.depends
# Target: kind1/counter.mli.depends, tags: { extension:mli, file:kind1/counter.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/counter.mli > kind1/counter.mli.depends
# Target: kind1/counter.cmi, tags: { byte, compile, extension:mli, file:kind1/counter.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/counter.cmi kind1/counter.mli
# Target: kind1/tables.ml.depends, tags: { annot, debug, extension:ml, file:kind1/tables.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/tables.ml > kind1/tables.ml.depends
# Target: kind1/exceptions.cmi, tags: { byte, compile, extension:mli, file:kind1/exceptions.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/exceptions.cmi kind1/exceptions.mli
# Target: kind1/globals.cmi, tags: { byte, compile, extension:mli, file:kind1/globals.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/globals.cmi kind1/globals.mli
# Target: kind1/lus_convert.cmi, tags: { byte, compile, extension:mli, file:kind1/lus_convert.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/lus_convert.cmi kind1/lus_convert.mli
# Target: kind1/tables.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/tables.cmo, file:kind1/tables.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/tables.cmo kind1/tables.ml
# Target: kind1/counter.ml.depends, tags: { annot, debug, extension:ml, file:kind1/counter.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/counter.ml > kind1/counter.ml.depends
# Target: kind1/deftable.mli.depends, tags: { extension:mli, file:kind1/deftable.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/deftable.mli > kind1/deftable.mli.depends
# Target: kind1/deftable.cmi, tags: { byte, compile, extension:mli, file:kind1/deftable.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/deftable.cmi kind1/deftable.mli
# Target: kind1/deftable.ml.depends, tags: { annot, debug, extension:ml, file:kind1/deftable.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/deftable.ml > kind1/deftable.ml.depends
# Target: kind1/exceptions.ml.depends, tags: { annot, debug, extension:ml, file:kind1/exceptions.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/exceptions.ml > kind1/exceptions.ml.depends
# Target: kind1/oldFlags.ml.depends, tags: { annot, debug, extension:ml, file:kind1/oldFlags.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/oldFlags.ml > kind1/oldFlags.ml.depends
# Target: kind1/globals.ml.depends, tags: { annot, debug, extension:ml, file:kind1/globals.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/globals.ml > kind1/globals.ml.depends
# Target: kind1/info.ml.depends, tags: { annot, debug, extension:ml, file:kind1/info.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/info.ml > kind1/info.ml.depends
# Target: kind1/inlining.mli.depends, tags: { extension:mli, file:kind1/inlining.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/inlining.mli > kind1/inlining.mli.depends
# Target: kind1/inlining.cmi, tags: { byte, compile, extension:mli, file:kind1/inlining.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/inlining.cmi kind1/inlining.mli
# Target: kind1/inlining.ml.depends, tags: { annot, debug, extension:ml, file:kind1/inlining.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/inlining.ml > kind1/inlining.ml.depends
# Target: kind1/lus_assertions.mli.depends, tags: { extension:mli, file:kind1/lus_assertions.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lus_assertions.mli > kind1/lus_assertions.mli.depends
# Target: kind1/lus_assertions.cmi, tags: { byte, compile, extension:mli, file:kind1/lus_assertions.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/lus_assertions.cmi kind1/lus_assertions.mli
# Target: kind1/lus_assertions.ml.depends, tags: { annot, debug, extension:ml, file:kind1/lus_assertions.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lus_assertions.ml > kind1/lus_assertions.ml.depends
# Target: kind1/lus_convert.ml.depends, tags: { annot, debug, extension:ml, file:kind1/lus_convert.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lus_convert.ml > kind1/lus_convert.ml.depends
# Target: kind1/lus_flatten.mli.depends, tags: { extension:mli, file:kind1/lus_flatten.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lus_flatten.mli > kind1/lus_flatten.mli.depends
# Target: kind1/lus_flatten.cmi, tags: { byte, compile, extension:mli, file:kind1/lus_flatten.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/lus_flatten.cmi kind1/lus_flatten.mli
# Target: kind1/lus_flatten.ml.depends, tags: { annot, debug, extension:ml, file:kind1/lus_flatten.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lus_flatten.ml > kind1/lus_flatten.ml.depends
# Target: kind1/lustre_lexer.mll, tags: { extension:mll, file:kind1/lustre_lexer.mll, lexer, ocaml, ocamllex, quiet, traverse }
/usr/local/bin/ocamllex.opt -q kind1/lustre_lexer.mll
# Target: kind1/lustre_lexer.ml.depends, tags: { annot, debug, extension:ml, file:kind1/lustre_lexer.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lustre_lexer.ml > kind1/lustre_lexer.ml.depends
# Target: kind1/lustre_parser.mly, tags: { extension:mly, file:kind1/lustre_parser.mly, ocaml, ocamlyacc, parser, quiet, traverse }
/usr/local/bin/ocamlyacc kind1/lustre_parser.mly
+ /usr/local/bin/ocamlyacc kind1/lustre_parser.mly
182 shift/reduce conflicts.
# Target: kind1/lustre_parser.mli.depends, tags: { extension:mli, file:kind1/lustre_parser.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lustre_parser.mli > kind1/lustre_parser.mli.depends
# Target: kind1/lustre_parser.cmi, tags: { byte, compile, extension:mli, file:kind1/lustre_parser.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/lustre_parser.cmi kind1/lustre_parser.mli
# Target: kind1/lustre_parser.ml.depends, tags: { annot, debug, extension:ml, file:kind1/lustre_parser.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lustre_parser.ml > kind1/lustre_parser.ml.depends
# Target: kind1/lus_types.mli.depends, tags: { extension:mli, file:kind1/lus_types.mli, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lus_types.mli > kind1/lus_types.mli.depends
# Target: kind1/lus_types.cmi, tags: { byte, compile, extension:mli, file:kind1/lus_types.mli, interf, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -I kind1 -o kind1/lus_types.cmi kind1/lus_types.mli
# Target: kind1/lus_types.ml.depends, tags: { annot, debug, extension:ml, file:kind1/lus_types.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/lus_types.ml > kind1/lus_types.ml.depends
# Target: kind1/solver_base.ml.depends, tags: { annot, debug, extension:ml, file:kind1/solver_base.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/solver_base.ml > kind1/solver_base.ml.depends
# Target: kind1/solvers_path.ml.depends, tags: { annot, debug, extension:ml, file:kind1/solvers_path.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/solvers_path.ml > kind1/solvers_path.ml.depends
# Target: kind1/solvers_path.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/solvers_path.cmo, file:kind1/solvers_path.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/solvers_path.cmo kind1/solvers_path.ml
# Target: kind1/types.ml.depends, tags: { annot, debug, extension:ml, file:kind1/types.ml, ocaml, ocamldep, quiet, traverse }
/usr/local/bin/ocamldep.opt -modules kind1/types.ml > kind1/types.ml.depends
# Target: kind1/channels.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/channels.cmo, file:kind1/channels.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/channels.cmo kind1/channels.ml
+ /usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/channels.cmo kind1/channels.ml
File "kind1/channels.ml", line 261, characters 11-23:
Warning 21: this statement never returns (or has an unsound type.)
# Target: kind1/coi.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/coi.cmo, file:kind1/coi.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/coi.cmo kind1/coi.ml
# Target: kind1/counter.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/counter.cmo, file:kind1/counter.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/counter.cmo kind1/counter.ml
# Target: kind1/deftable.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/deftable.cmo, file:kind1/deftable.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/deftable.cmo kind1/deftable.ml
# Target: kind1/exceptions.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/exceptions.cmo, file:kind1/exceptions.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/exceptions.cmo kind1/exceptions.ml
# Target: kind1/oldFlags.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/oldFlags.cmo, file:kind1/oldFlags.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/oldFlags.cmo kind1/oldFlags.ml
# Target: kind1/globals.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/globals.cmo, file:kind1/globals.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/globals.cmo kind1/globals.ml
# Target: kind1/info.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/info.cmo, file:kind1/info.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/info.cmo kind1/info.ml
# Target: kind1/inlining.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/inlining.cmo, file:kind1/inlining.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/inlining.cmo kind1/inlining.ml
# Target: kind1/lus_assertions.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/lus_assertions.cmo, file:kind1/lus_assertions.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/lus_assertions.cmo kind1/lus_assertions.ml
# Target: kind1/lus_convert.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/lus_convert.cmo, file:kind1/lus_convert.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/lus_convert.cmo kind1/lus_convert.ml
+ /usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/lus_convert.cmo kind1/lus_convert.ml
File "kind1/lus_convert.ml", line 538, characters 3-49:
Warning 21: this statement never returns (or has an unsound type.)
# Target: kind1/lus_flatten.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/lus_flatten.cmo, file:kind1/lus_flatten.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/lus_flatten.cmo kind1/lus_flatten.ml
# Target: kind1/lustre_lexer.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/lustre_lexer.cmo, file:kind1/lustre_lexer.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/lustre_lexer.cmo kind1/lustre_lexer.ml
# Target: kind1/lustre_parser.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/lustre_parser.cmo, file:kind1/lustre_parser.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/lustre_parser.cmo kind1/lustre_parser.ml
+ /usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/lustre_parser.cmo kind1/lustre_parser.ml
File "kind1/lustre_parser.mly", line 707, characters 19-46:
Warning 10: this expression should have type unit.
# Target: kind1/lus_types.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/lus_types.cmo, file:kind1/lus_types.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/lus_types.cmo kind1/lus_types.ml
+ /usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/lus_types.cmo kind1/lus_types.ml
File "kind1/lus_types.ml", line 99, characters 13-49:
Warning 21: this statement never returns (or has an unsound type.)
# Target: kind1/solver_base.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/solver_base.cmo, file:kind1/solver_base.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/solver_base.cmo kind1/solver_base.ml
# Target: kind1/types.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind1/types.cmo, file:kind1/types.ml, implem, ocaml, quiet, traverse }
/usr/local/bin/ocamlc.opt -c -g -annot -I kind1 -o kind1/types.cmo kind1/types.ml
# Target: kind1.cmo, tags: { byte, extension:cmo, file:kind1.cmo, ocaml, pack, quiet }
/usr/local/bin/ocamlc.opt -pack kind1/types.cmo kind1/oldFlags.cmo kind1/channels.cmo kind1/exceptions.cmo kind1/solvers_path.cmo kind1/counter.cmo kind1/tables.cmo kind1/solver_base.cmo kind1/globals.cmo kind1/lus_assertions.cmo kind1/lus_convert.cmo kind1/coi.cmo kind1/deftable.cmo kind1/info.cmo kind1/inlining.cmo kind1/lus_flatten.cmo kind1/lus_types.cmo kind1/lustre_parser.cmo kind1/lustre_lexer.cmo -o kind1.cmo
# Target: PDR.mli.depends, tags: { extension:mli, file:PDR.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules PDR.mli > PDR.mli.depends
# Target: bmc.cmi, tags: { byte, compile, extension:mli, file:bmc.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o bmc.cmi bmc.mli
# Target: config.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:config.cmo, file:config.ml, implem, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o config.cmo config.ml
# Target: debug.cmi, tags: { byte, compile, extension:mli, file:debug.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o debug.cmi debug.mli
# Target: flags.cmi, tags: { byte, compile, extension:mli, file:flags.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o flags.cmi flags.mli
# Target: ind.cmi, tags: { byte, compile, extension:mli, file:ind.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o ind.cmi ind.mli
# Target: interpreter.cmi, tags: { byte, compile, extension:mli, file:interpreter.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o interpreter.cmi interpreter.mli
# Target: invGenDummy.cmi, tags: { byte, compile, extension:mli, file:invGenDummy.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o invGenDummy.cmi invGenDummy.mli
# Target: invarManager.cmi, tags: { byte, compile, extension:mli, file:invarManager.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o invarManager.cmi invarManager.mli
# Target: oldParser.cmi, tags: { byte, compile, extension:mli, file:oldParser.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o oldParser.cmi oldParser.mli
# Target: PDR.cmi, tags: { byte, compile, extension:mli, file:PDR.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o PDR.cmi PDR.mli
# Target: kind2.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:kind2.cmo, file:kind2.ml, implem, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o kind2.cmo kind2.ml
# Target: bmc.ml.depends, tags: { annot, debug, extension:ml, file:bmc.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules bmc.ml > bmc.ml.depends
# Target: SMTLIBSolver.ml.depends, tags: { annot, debug, extension:ml, file:SMTLIBSolver.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SMTLIBSolver.ml > SMTLIBSolver.ml.depends
# Target: event.ml.depends, tags: { annot, debug, extension:ml, file:event.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules event.ml > event.ml.depends
# Target: lib.ml.depends, tags: { annot, debug, extension:ml, file:lib.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet, thread }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules lib.ml > lib.ml.depends
# Target: hString.ml.depends, tags: { annot, debug, extension:ml, file:hString.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules hString.ml > hString.ml.depends
# Target: hashcons.ml.depends, tags: { annot, debug, extension:ml, file:hashcons.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules hashcons.ml > hashcons.ml.depends
# Target: hashcons.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:hashcons.cmx, file:hashcons.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o hashcons.cmx hashcons.ml
# Target: hString.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:hString.cmx, file:hString.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o hString.cmx hString.ml
# Target: messaging.ml.depends, tags: { annot, debug, extension:ml, file:messaging.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet, thread, use_ZMQ }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules messaging.ml > messaging.ml.depends
# Target: messaging.mli.depends, tags: { extension:mli, file:messaging.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet, thread }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules messaging.mli > messaging.mli.depends
# Target: messaging.cmi, tags: { byte, compile, extension:mli, file:messaging.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet, thread }
/usr/local/bin/ocamlc.opt -c -thread -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o messaging.cmi messaging.mli
# Target: lib.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:lib.cmx, file:lib.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet, thread }
/usr/local/bin/ocamlopt.opt -c -g -annot -thread -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o lib.cmx lib.ml
# Target: stat.ml.depends, tags: { annot, debug, extension:ml, file:stat.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules stat.ml > stat.ml.depends
# Target: stateVar.ml.depends, tags: { annot, debug, extension:ml, file:stateVar.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules stateVar.ml > stateVar.ml.depends
# Target: kind1/types.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/types.cmx, file:kind1/types.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/types.cmx kind1/types.ml
# Target: kind1/oldFlags.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/oldFlags.cmx, file:kind1/oldFlags.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/oldFlags.cmx kind1/oldFlags.ml
# Target: kind1/exceptions.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/exceptions.cmx, file:kind1/exceptions.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/exceptions.cmx kind1/exceptions.ml
# Target: kind1/channels.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/channels.cmx, file:kind1/channels.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/channels.cmx kind1/channels.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/channels.cmx kind1/channels.ml
File "kind1/channels.ml", line 261, characters 11-23:
Warning 21: this statement never returns (or has an unsound type.)
# Target: kind1/counter.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/counter.cmx, file:kind1/counter.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/counter.cmx kind1/counter.ml
# Target: kind1/solvers_path.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/solvers_path.cmx, file:kind1/solvers_path.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/solvers_path.cmx kind1/solvers_path.ml
# Target: kind1/tables.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/tables.cmx, file:kind1/tables.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/tables.cmx kind1/tables.ml
# Target: kind1/solver_base.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/solver_base.cmx, file:kind1/solver_base.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/solver_base.cmx kind1/solver_base.ml
# Target: kind1/globals.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/globals.cmx, file:kind1/globals.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/globals.cmx kind1/globals.ml
# Target: kind1/lus_assertions.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/lus_assertions.cmx, file:kind1/lus_assertions.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/lus_assertions.cmx kind1/lus_assertions.ml
# Target: kind1/lus_convert.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/lus_convert.cmx, file:kind1/lus_convert.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/lus_convert.cmx kind1/lus_convert.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/lus_convert.cmx kind1/lus_convert.ml
File "kind1/lus_convert.ml", line 538, characters 3-49:
Warning 21: this statement never returns (or has an unsound type.)
# Target: kind1/coi.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/coi.cmx, file:kind1/coi.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/coi.cmx kind1/coi.ml
# Target: kind1/lus_types.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/lus_types.cmx, file:kind1/lus_types.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/lus_types.cmx kind1/lus_types.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/lus_types.cmx kind1/lus_types.ml
File "kind1/lus_types.ml", line 99, characters 13-49:
Warning 21: this statement never returns (or has an unsound type.)
# Target: kind1/lustre_parser.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/lustre_parser.cmx, file:kind1/lustre_parser.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/lustre_parser.cmx kind1/lustre_parser.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/lustre_parser.cmx kind1/lustre_parser.ml
File "kind1/lustre_parser.mly", line 707, characters 19-46:
Warning 10: this expression should have type unit.
# Target: kind1/deftable.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/deftable.cmx, file:kind1/deftable.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/deftable.cmx kind1/deftable.ml
# Target: kind1/info.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/info.cmx, file:kind1/info.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/info.cmx kind1/info.ml
# Target: kind1/inlining.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/inlining.cmx, file:kind1/inlining.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/inlining.cmx kind1/inlining.ml
# Target: kind1/lus_flatten.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/lus_flatten.cmx, file:kind1/lus_flatten.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/lus_flatten.cmx kind1/lus_flatten.ml
# Target: kind1/lustre_lexer.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind1/lustre_lexer.cmx, file:kind1/lustre_lexer.ml, for-pack(Kind1), implem, native, ocaml, quiet, traverse }
/usr/local/bin/ocamlopt.opt -c -g -annot -for-pack Kind1 -I kind1 -o kind1/lustre_lexer.cmx kind1/lustre_lexer.ml
# Target: type.ml.depends, tags: { annot, debug, extension:ml, file:type.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules type.ml > type.ml.depends
# Target: ufSymbol.ml.depends, tags: { annot, debug, extension:ml, file:ufSymbol.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules ufSymbol.ml > ufSymbol.ml.depends
# Target: type.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:type.cmx, file:type.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o type.cmx type.ml
# Target: kind1.cmx, tags: { extension:cmx, file:kind1.cmx, native, ocaml, pack, quiet }
touch kind1.mli  ; if  /usr/local/bin/ocamlopt.opt -pack -I kind1 kind1/types.cmx kind1/oldFlags.cmx kind1/channels.cmx kind1/counter.cmx kind1/exceptions.cmx kind1/solvers_path.cmx kind1/tables.cmx kind1/solver_base.cmx kind1/globals.cmx kind1/lus_assertions.cmx kind1/lus_convert.cmx kind1/coi.cmx kind1/deftable.cmx kind1/info.cmx kind1/inlining.cmx kind1/lus_flatten.cmx kind1/lus_types.cmx kind1/lustre_parser.cmx kind1/lustre_lexer.cmx -o kind1.cmx  ; then  rm -f kind1.mli  ; else  rm -f kind1.mli  ; exit 1; fi
# Target: ufSymbol.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:ufSymbol.cmx, file:ufSymbol.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o ufSymbol.cmx ufSymbol.ml
# Target: term.ml.depends, tags: { annot, debug, extension:ml, file:term.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules term.ml > term.ml.depends
# Target: ltree.ml.depends, tags: { annot, debug, extension:ml, file:ltree.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules ltree.ml > ltree.ml.depends
# Target: symbol.ml.depends, tags: { annot, debug, extension:ml, file:symbol.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules symbol.ml > symbol.ml.depends
# Target: termAttr.ml.depends, tags: { annot, debug, extension:ml, file:termAttr.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules termAttr.ml > termAttr.ml.depends
# Target: termAttr.mli.depends, tags: { extension:mli, file:termAttr.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules termAttr.mli > termAttr.mli.depends
# Target: termAttr.cmi, tags: { byte, compile, extension:mli, file:termAttr.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o termAttr.cmi termAttr.mli
# Target: var.ml.depends, tags: { annot, debug, extension:ml, file:var.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules var.ml > var.ml.depends
# Target: stateVar.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:stateVar.cmx, file:stateVar.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o stateVar.cmx stateVar.ml
# Target: ltree.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:ltree.cmx, file:ltree.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o ltree.cmx ltree.ml
# Target: symbol.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:symbol.cmx, file:symbol.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o symbol.cmx symbol.ml
# Target: termAttr.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:termAttr.cmx, file:termAttr.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o termAttr.cmx termAttr.ml
# Target: var.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:var.cmx, file:var.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o var.cmx var.ml
# Target: messaging.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:messaging.cmx, file:messaging.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet, thread, use_ZMQ }
/usr/local/bin/ocamlopt.opt -c -g -annot -thread -I ../../ocamlczmq/lib -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o messaging.cmx messaging.ml
# Target: stat.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:stat.cmx, file:stat.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o stat.cmx stat.ml
# Target: term.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:term.cmx, file:term.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o term.cmx term.ml
# Target: flags.ml.depends, tags: { annot, debug, extension:ml, file:flags.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules flags.ml > flags.ml.depends
# Target: event.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:event.cmx, file:event.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o event.cmx event.ml
# Target: SExprLexer.mll, tags: { extension:mll, file:SExprLexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/local/bin/ocamllex.opt -q SExprLexer.mll
# Target: SExprLexer.ml.depends, tags: { annot, debug, extension:ml, file:SExprLexer.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SExprLexer.ml > SExprLexer.ml.depends
# Target: SExprParser.mly, tags: { extension:mly, file:SExprParser.mly, ocaml, ocamlyacc, parser, quiet }
/usr/local/bin/ocamlyacc SExprParser.mly
+ /usr/local/bin/ocamlyacc SExprParser.mly
3 rules never reduced
3 reduce/reduce conflicts.
# Target: SExprParser.mli.depends, tags: { extension:mli, file:SExprParser.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SExprParser.mli > SExprParser.mli.depends
# Target: SExprParser.cmi, tags: { byte, compile, extension:mli, file:SExprParser.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SExprParser.cmi SExprParser.mli
# Target: SExprLexer.cmo, tags: { annot, byte, compile, debug, extension:cmo, extension:ml, file:SExprLexer.cmo, file:SExprLexer.ml, implem, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SExprLexer.cmo SExprLexer.ml
# Target: SExprParser.ml.depends, tags: { annot, debug, extension:ml, file:SExprParser.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SExprParser.ml > SExprParser.ml.depends
# Target: SExprBase.ml.depends, tags: { annot, debug, extension:ml, file:SExprBase.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SExprBase.ml > SExprBase.ml.depends
# Target: SExprBase.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:SExprBase.cmx, file:SExprBase.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SExprBase.cmx SExprBase.ml
# Target: hStringSExpr.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:hStringSExpr.cmx, file:hStringSExpr.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o hStringSExpr.cmx hStringSExpr.ml
# Target: SExprParser.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:SExprParser.cmx, file:SExprParser.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SExprParser.cmx SExprParser.ml
# Target: SMTExpr.ml.depends, tags: { annot, debug, extension:ml, file:SMTExpr.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SMTExpr.ml > SMTExpr.ml.depends
# Target: flags.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:flags.cmx, file:flags.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o flags.cmx flags.ml
# Target: SExprLexer.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:SExprLexer.cmx, file:SExprLexer.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SExprLexer.cmx SExprLexer.ml
# Target: SMTExpr.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:SMTExpr.cmx, file:SMTExpr.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SMTExpr.cmx SMTExpr.ml
# Target: SMTLIBSolver.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:SMTLIBSolver.cmx, file:SMTLIBSolver.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SMTLIBSolver.cmx SMTLIBSolver.ml
# Target: eval.ml.depends, tags: { annot, debug, extension:ml, file:eval.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules eval.ml > eval.ml.depends
# Target: eval.mli.depends, tags: { extension:mli, file:eval.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules eval.mli > eval.mli.depends
# Target: eval.cmi, tags: { byte, compile, extension:mli, file:eval.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o eval.cmi eval.mli
# Target: simplify.ml.depends, tags: { annot, debug, extension:ml, file:simplify.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules simplify.ml > simplify.ml.depends
# Target: simplify.mli.depends, tags: { extension:mli, file:simplify.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules simplify.mli > simplify.mli.depends
# Target: simplify.cmi, tags: { byte, compile, extension:mli, file:simplify.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o simplify.cmi simplify.mli
# Target: simplify.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:simplify.cmx, file:simplify.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o simplify.cmx simplify.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o simplify.cmx simplify.ml
File "simplify.ml", line 643, characters 26-2264:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
File "simplify.ml", line 1003, characters 2-19188:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
# Target: SMTSolver.ml.depends, tags: { annot, debug, extension:ml, file:SMTSolver.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SMTSolver.ml > SMTSolver.ml.depends
# Target: SMTSolver.mli.depends, tags: { extension:mli, file:SMTSolver.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules SMTSolver.mli > SMTSolver.mli.depends
# Target: SMTSolver.cmi, tags: { byte, compile, extension:mli, file:SMTSolver.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SMTSolver.cmi SMTSolver.mli
# Target: solverMethods.ml.depends, tags: { annot, debug, extension:ml, file:solverMethods.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules solverMethods.ml > solverMethods.ml.depends
# Target: solverMethods.mli.depends, tags: { extension:mli, file:solverMethods.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules solverMethods.mli > solverMethods.mli.depends
# Target: solverMethods.cmi, tags: { byte, compile, extension:mli, file:solverMethods.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o solverMethods.cmi solverMethods.mli
# Target: SMTSolver.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:SMTSolver.cmx, file:SMTSolver.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o SMTSolver.cmx SMTSolver.ml
# Target: transSys.ml.depends, tags: { annot, debug, extension:ml, file:transSys.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules transSys.ml > transSys.ml.depends
# Target: transSys.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:transSys.cmx, file:transSys.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o transSys.cmx transSys.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o transSys.cmx transSys.ml
File "transSys.ml", line 247, characters 7-465:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
File "transSys.ml", line 271, characters 7-350:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
File "transSys.ml", line 291, characters 7-281:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
File "transSys.ml", line 308, characters 5-361:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
File "transSys.ml", line 546, characters 13-510:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
# Target: config.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:config.cmx, file:config.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o config.cmx config.ml
# Target: eval.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:eval.cmx, file:eval.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o eval.cmx eval.ml
# Target: solverMethods.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:solverMethods.cmx, file:solverMethods.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o solverMethods.cmx solverMethods.ml
# Target: debug.ml.depends, tags: { annot, debug, extension:ml, file:debug.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules debug.ml > debug.ml.depends
# Target: ind.ml.depends, tags: { annot, debug, extension:ml, file:ind.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules ind.ml > ind.ml.depends
# Target: interpreter.ml.depends, tags: { annot, debug, extension:ml, file:interpreter.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules interpreter.ml > interpreter.ml.depends
# Target: inputParser.ml.depends, tags: { annot, debug, extension:ml, file:inputParser.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules inputParser.ml > inputParser.ml.depends
# Target: inputParser.mli.depends, tags: { extension:mli, file:inputParser.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules inputParser.mli > inputParser.mli.depends
# Target: inputParser.cmi, tags: { byte, compile, extension:mli, file:inputParser.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o inputParser.cmi inputParser.mli
# Target: inputParser.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:inputParser.cmx, file:inputParser.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o inputParser.cmx inputParser.ml
# Target: invGenDummy.ml.depends, tags: { annot, debug, extension:ml, file:invGenDummy.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules invGenDummy.ml > invGenDummy.ml.depends
# Target: invarManager.ml.depends, tags: { annot, debug, extension:ml, file:invarManager.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules invarManager.ml > invarManager.ml.depends
# Target: oldParser.ml.depends, tags: { annot, debug, extension:ml, file:oldParser.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules oldParser.ml > oldParser.ml.depends
# Target: PDR.ml.depends, tags: { annot, debug, extension:ml, file:PDR.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules PDR.ml > PDR.ml.depends
# Target: CNF.ml.depends, tags: { annot, debug, extension:ml, file:CNF.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules CNF.ml > CNF.ml.depends
# Target: CNF.mli.depends, tags: { extension:mli, file:CNF.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules CNF.mli > CNF.mli.depends
# Target: clause.mli.depends, tags: { extension:mli, file:clause.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules clause.mli > clause.mli.depends
# Target: literal.mli.depends, tags: { extension:mli, file:literal.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules literal.mli > literal.mli.depends
# Target: literal.cmi, tags: { byte, compile, extension:mli, file:literal.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o literal.cmi literal.mli
# Target: clause.cmi, tags: { byte, compile, extension:mli, file:clause.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o clause.cmi clause.mli
# Target: CNF.cmi, tags: { byte, compile, extension:mli, file:CNF.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o CNF.cmi CNF.mli
# Target: clause.ml.depends, tags: { annot, debug, extension:ml, file:clause.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules clause.ml > clause.ml.depends
# Target: literal.ml.depends, tags: { annot, debug, extension:ml, file:literal.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules literal.ml > literal.ml.depends
# Target: literal.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:literal.cmx, file:literal.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o literal.cmx literal.ml
# Target: clause.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:clause.cmx, file:clause.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o clause.cmx clause.ml
# Target: lustre.ml.depends, tags: { annot, debug, extension:ml, file:lustre.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules lustre.ml > lustre.ml.depends
# Target: lustre.mli.depends, tags: { extension:mli, file:lustre.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules lustre.mli > lustre.mli.depends
# Target: lustre.cmi, tags: { byte, compile, extension:mli, file:lustre.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o lustre.cmi lustre.mli
# Target: QE.ml.depends, tags: { annot, debug, extension:ml, file:QE.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules QE.ml > QE.ml.depends
# Target: QE.mli.depends, tags: { extension:mli, file:QE.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules QE.mli > QE.mli.depends
# Target: QE.cmi, tags: { byte, compile, extension:mli, file:QE.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o QE.cmi QE.mli
# Target: cooperQE.ml.depends, tags: { annot, debug, extension:ml, file:cooperQE.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules cooperQE.ml > cooperQE.ml.depends
# Target: cooperQE.mli.depends, tags: { extension:mli, file:cooperQE.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules cooperQE.mli > cooperQE.mli.depends
# Target: poly.mli.depends, tags: { extension:mli, file:poly.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules poly.mli > poly.mli.depends
# Target: poly.cmi, tags: { byte, compile, extension:mli, file:poly.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o poly.cmi poly.mli
# Target: cooperQE.cmi, tags: { byte, compile, extension:mli, file:cooperQE.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o cooperQE.cmi cooperQE.mli
# Target: poly.ml.depends, tags: { annot, debug, extension:ml, file:poly.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules poly.ml > poly.ml.depends
# Target: poly.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:poly.cmx, file:poly.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o poly.cmx poly.ml
# Target: extract.ml.depends, tags: { annot, debug, extension:ml, file:extract.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules extract.ml > extract.ml.depends
# Target: extract.mli.depends, tags: { extension:mli, file:extract.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules extract.mli > extract.mli.depends
# Target: extract.cmi, tags: { byte, compile, extension:mli, file:extract.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o extract.cmi extract.mli
# Target: presburger.ml.depends, tags: { annot, debug, extension:ml, file:presburger.ml, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules presburger.ml > presburger.ml.depends
# Target: presburger.mli.depends, tags: { extension:mli, file:presburger.mli, ocaml, ocamldep, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamldep.opt -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -modules presburger.mli > presburger.mli.depends
# Target: presburger.cmi, tags: { byte, compile, extension:mli, file:presburger.mli, interf, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlc.opt -c -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o presburger.cmi presburger.mli
# Target: cooperQE.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:cooperQE.cmx, file:cooperQE.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o cooperQE.cmx cooperQE.ml
# Target: extract.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:extract.cmx, file:extract.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o extract.cmx extract.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o extract.cmx extract.ml
File "extract.ml", line 54, characters 62-12270:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
File "extract.ml", line 485, characters 6-968:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
File "extract.ml", line 57, characters 6-28:
Warning 26: unused variable term.
# Target: presburger.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:presburger.cmx, file:presburger.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o presburger.cmx presburger.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o presburger.cmx presburger.ml
File "presburger.ml", line 334, characters 8-6639:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
# Target: CNF.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:CNF.cmx, file:CNF.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o CNF.cmx CNF.ml
# Target: lustre.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:lustre.cmx, file:lustre.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o lustre.cmx lustre.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o lustre.cmx lustre.ml
File "lustre.ml", line 71, characters 37-347:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Attr (_, _)
# Target: QE.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:QE.cmx, file:QE.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o QE.cmx QE.ml
# Target: bmc.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:bmc.cmx, file:bmc.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o bmc.cmx bmc.ml
# Target: debug.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:debug.cmx, file:debug.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o debug.cmx debug.ml
# Target: ind.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:ind.cmx, file:ind.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o ind.cmx ind.ml
# Target: interpreter.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:interpreter.cmx, file:interpreter.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o interpreter.cmx interpreter.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o interpreter.cmx interpreter.ml
File "interpreter.ml", line 58, characters 6-7:
Warning 26: unused variable l.
File "interpreter.ml", line 73, characters 10-18:
Warning 26: unused variable assert_t.
# Target: invGenDummy.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:invGenDummy.cmx, file:invGenDummy.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o invGenDummy.cmx invGenDummy.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o invGenDummy.cmx invGenDummy.ml
File "invGenDummy.ml", line 93, characters 2-41:
Warning 5: this function application is partial,
maybe some arguments are missing.
# Target: invarManager.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:invarManager.cmx, file:invarManager.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o invarManager.cmx invarManager.ml
# Target: oldParser.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:oldParser.cmx, file:oldParser.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o oldParser.cmx oldParser.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o oldParser.cmx oldParser.ml
File "oldParser.ml", line 1221, characters 6-12:
Warning 26: unused variable outdoc.
File "oldParser.ml", line 1224, characters 6-14:
Warning 26: unused variable def_hash.
File "oldParser.ml", line 1227, characters 6-17:
Warning 26: unused variable no_stateful.
File "oldParser.ml", line 1385, characters 8-19:
Warning 26: unused variable assert_term.
File "oldParser.ml", line 1426, characters 8-12:
Warning 26: unused variable vars.
# Target: PDR.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:PDR.cmx, file:PDR.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o PDR.cmx PDR.ml
+ /usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o PDR.cmx PDR.ml
File "PDR.ml", line 283, characters 10-32:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
[]
File "PDR.ml", line 1951, characters 19-61:
Warning 26: unused variable solvers.
# Target: kind2.cmx, tags: { annot, compile, debug, extension:cmx, extension:ml, file:kind2.cmx, file:kind2.ml, implem, native, ocaml, pp(camlp4o.opt -parser Camlp4DebugParser.cmxs), quiet }
/usr/local/bin/ocamlopt.opt -c -g -annot -pp 'camlp4o.opt -parser Camlp4DebugParser.cmxs' -o kind2.cmx kind2.ml
# Target: kind2.native, tags: { dont_link_with, extension:native, file:kind2.native, link, native, ocaml, program, quiet, thread, use_ZMQ, use_str, use_unix }
/usr/local/bin/ocamlopt.opt unix.cmxa str.cmxa threads.cmxa -thread -I ../../ocamlczmq/lib ZMQ.cmxa hashcons.cmx hString.cmx kind1.cmx lib.cmx ltree.cmx type.cmx ufSymbol.cmx stateVar.cmx symbol.cmx termAttr.cmx var.cmx term.cmx literal.cmx stat.cmx clause.cmx CNF.cmx SExprBase.cmx hStringSExpr.cmx SExprParser.cmx SExprLexer.cmx SMTExpr.cmx messaging.cmx event.cmx flags.cmx SMTLIBSolver.cmx SMTSolver.cmx config.cmx simplify.cmx eval.cmx poly.cmx cooperQE.cmx extract.cmx presburger.cmx transSys.cmx solverMethods.cmx QE.cmx lustre.cmx PDR.cmx bmc.cmx debug.cmx ind.cmx inputParser.cmx interpreter.cmx invGenDummy.cmx invarManager.cmx oldParser.cmx kind2.cmx -o kind2.native
# Compilation successful.
