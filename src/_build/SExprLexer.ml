# 47 "SExprLexer.mll"
 
  (** Lexer: Lexer Specification for S-expressions *)

  open Printf
  open Lexing
  open SExprParser

  let char_for_backslash = function
    | 'n' -> '\010'
    | 'r' -> '\013'
    | 'b' -> '\008'
    | 't' -> '\009'
    | c -> c

  let lf = '\010'

  let dec_code c1 c2 c3 =
    100 * (Char.code c1 - 48) + 10 * (Char.code c2 - 48) + (Char.code c3 - 48)

  let hex_code c1 c2 =
    let d1 = Char.code c1 in
    let val1 =
      if d1 >= 97 then d1 - 87
      else if d1 >= 65 then d1 - 55
      else d1 - 48 in
    let d2 = Char.code c2 in
    let val2 =
      if d2 >= 97 then d2 - 87
      else if d2 >= 65 then d2 - 55
      else d2 - 48 in
    val1 * 16 + val2

  let found_newline ({ lex_curr_p; _ } as lexbuf) diff =
    lexbuf.lex_curr_p <-
      {
        lex_curr_p with
        pos_lnum = lex_curr_p.pos_lnum + 1;
        pos_bol = lex_curr_p.pos_cnum - diff;
      }

  let lexeme_len lexbuf = lexeme_end lexbuf - lexeme_start lexbuf

  let main_failure lexbuf msg =
    let { pos_lnum; pos_bol; pos_cnum; _ } = lexeme_start_p lexbuf in
    let msg =
      sprintf
        "Sexplib.Lexer.main: %s at line %d char %d"
        msg pos_lnum (pos_cnum - pos_bol)
    in
    failwith msg

# 54 "SExprLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\245\255\010\000\043\000\048\000\251\255\252\255\253\255\
    \001\000\006\000\006\000\255\255\249\255\250\255\248\255\058\000\
    \091\000\101\000\134\000\144\000\014\000\246\255\020\000\248\255\
    \157\000\255\255\249\255\240\000\178\000\252\255\007\000\017\000\
    \030\000\188\000\251\255\054\001\250\255\062\000\250\255\253\255\
    \095\000\255\255\127\000\129\000\252\255\251\255\163\000\189\000\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\009\000\255\255\009\000\255\255\255\255\255\255\
    \001\000\001\000\255\255\255\255\255\255\255\255\255\255\009\000\
    \009\000\008\000\008\000\008\000\255\255\255\255\008\000\255\255\
    \255\255\255\255\255\255\006\000\006\000\255\255\006\000\001\000\
    \002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\002\000\000\000\002\000\002\000\002\000\000\000\000\000\000\000\
    \008\000\255\255\255\255\000\000\000\000\000\000\000\000\002\000\
    \002\000\018\000\018\000\018\000\022\000\000\000\022\000\000\000\
    \026\000\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\040\000\000\000\000\000\
    \040\000\000\000\040\000\040\000\000\000\000\000\040\000\040\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\011\000\255\255\009\000\010\000\255\255\009\000\
    \011\000\032\000\009\000\255\255\255\255\000\000\255\255\255\255\
    \023\000\000\000\031\000\000\000\000\000\000\000\255\255\000\000\
    \009\000\000\000\005\000\004\000\000\000\000\000\009\000\032\000\
    \007\000\006\000\255\255\000\000\255\255\016\000\000\000\000\000\
    \025\000\031\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\008\000\255\255\255\255\032\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \041\000\000\000\000\000\255\255\000\000\255\255\014\000\000\000\
    \255\255\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\255\255\019\000\000\000\000\000\
    \039\000\043\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\024\000\013\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\003\000\255\255\016\000\000\000\
    \000\000\255\255\047\000\255\255\255\255\255\255\015\000\255\255\
    \019\000\041\000\000\000\041\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\000\000\255\255\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\000\000\000\000\
    \255\255\039\000\045\000\039\000\043\000\000\000\255\255\031\000\
    \255\255\019\000\030\000\000\000\012\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\019\000\000\000\000\000\015\000\000\000\
    \255\255\255\255\042\000\000\000\000\000\029\000\000\000\029\000\
    \000\000\255\255\000\000\000\000\029\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\017\000\
    \000\000\000\000\000\000\046\000\000\000\000\000\000\000\255\255\
    \047\000\017\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
    \000\000\029\000\000\000\042\000\000\000\044\000\000\000\029\000\
    \001\000\255\255\017\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\029\000\017\000\000\000\021\000\029\000\
    \000\000\029\000\000\000\000\000\255\255\027\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \255\255\035\000\035\000\035\000\035\000\035\000\035\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\038\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\035\000\035\000\035\000\035\000\035\000\035\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\255\255\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\008\000\000\000\000\000\008\000\009\000\
    \010\000\030\000\009\000\002\000\002\000\255\255\002\000\002\000\
    \020\000\255\255\031\000\255\255\255\255\255\255\022\000\255\255\
    \000\000\255\255\000\000\000\000\255\255\255\255\009\000\032\000\
    \000\000\000\000\002\000\255\255\002\000\002\000\255\255\255\255\
    \020\000\031\000\002\000\002\000\003\000\003\000\022\000\003\000\
    \003\000\004\000\004\000\000\000\004\000\004\000\032\000\255\255\
    \255\255\255\255\255\255\015\000\015\000\002\000\015\000\015\000\
    \037\000\255\255\255\255\003\000\255\255\003\000\003\000\255\255\
    \004\000\255\255\004\000\003\000\003\000\255\255\255\255\255\255\
    \004\000\004\000\015\000\255\255\015\000\015\000\255\255\255\255\
    \037\000\037\000\015\000\015\000\016\000\016\000\003\000\016\000\
    \016\000\040\000\020\000\004\000\255\255\255\255\017\000\017\000\
    \022\000\017\000\017\000\255\255\255\255\015\000\255\255\255\255\
    \255\255\255\255\255\255\016\000\000\000\016\000\016\000\255\255\
    \255\255\040\000\040\000\016\000\016\000\017\000\002\000\017\000\
    \017\000\042\000\255\255\043\000\255\255\017\000\017\000\018\000\
    \018\000\255\255\018\000\018\000\255\255\255\255\016\000\255\255\
    \255\255\019\000\019\000\255\255\019\000\019\000\255\255\255\255\
    \017\000\042\000\042\000\043\000\043\000\255\255\018\000\024\000\
    \018\000\018\000\024\000\255\255\004\000\046\000\018\000\018\000\
    \019\000\255\255\019\000\019\000\255\255\255\255\015\000\255\255\
    \019\000\019\000\037\000\255\255\255\255\024\000\255\255\024\000\
    \255\255\018\000\255\255\255\255\024\000\046\000\046\000\047\000\
    \255\255\255\255\255\255\019\000\255\255\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\016\000\
    \255\255\255\255\255\255\040\000\255\255\255\255\255\255\047\000\
    \047\000\017\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\255\255\255\255\
    \255\255\024\000\255\255\042\000\255\255\043\000\255\255\024\000\
    \000\000\008\000\018\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\024\000\019\000\255\255\020\000\024\000\
    \255\255\024\000\255\255\255\255\022\000\024\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\255\255\003\000\255\255\255\255\255\255\255\255\
    \004\000\027\000\027\000\027\000\027\000\027\000\027\000\255\255\
    \255\255\047\000\015\000\255\255\255\255\255\255\037\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\027\000\027\000\027\000\027\000\027\000\027\000\255\255\
    \255\255\255\255\255\255\016\000\255\255\255\255\255\255\040\000\
    \255\255\255\255\255\255\255\255\255\255\017\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\000\
    \035\000\035\000\035\000\035\000\035\000\255\255\255\255\042\000\
    \255\255\043\000\255\255\255\255\255\255\255\255\018\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \019\000\255\255\255\255\255\255\255\255\255\255\255\255\035\000\
    \035\000\035\000\035\000\035\000\035\000\024\000\255\255\255\255\
    \255\255\255\255\255\255\046\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\047\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec main buf lexbuf =
    __ocaml_lex_main_rec buf lexbuf 0
and __ocaml_lex_main_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 111 "SExprLexer.mll"
                     ( found_newline lexbuf 0; main buf lexbuf )
# 245 "SExprLexer.ml"

  | 1 ->
# 112 "SExprLexer.mll"
                              ( main buf lexbuf )
# 250 "SExprLexer.ml"

  | 2 ->
# 113 "SExprLexer.mll"
        ( LPAREN )
# 255 "SExprLexer.ml"

  | 3 ->
# 114 "SExprLexer.mll"
        ( RPAREN )
# 260 "SExprLexer.ml"

  | 4 ->
# 116 "SExprLexer.mll"
      (
        scan_string buf (lexeme_start_p lexbuf) lexbuf;
        let str = Buffer.contents buf in
        Buffer.clear buf;
        STRING (HString.mk_hstring str)
      )
# 270 "SExprLexer.ml"

  | 5 ->
# 122 "SExprLexer.mll"
         ( SEXP_COMMENT )
# 275 "SExprLexer.ml"

  | 6 ->
# 124 "SExprLexer.mll"
      (
        scan_block_comment buf [lexeme_start_p lexbuf] lexbuf;
        main buf lexbuf
      )
# 283 "SExprLexer.ml"

  | 7 ->
# 128 "SExprLexer.mll"
         ( main_failure lexbuf "illegal end of comment" )
# 288 "SExprLexer.ml"

  | 8 ->
# 130 "SExprLexer.mll"
      ( main_failure lexbuf "comment tokens in unquoted atom" )
# 293 "SExprLexer.ml"

  | 9 ->
let
# 131 "SExprLexer.mll"
                                      str
# 299 "SExprLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 131 "SExprLexer.mll"
                                          ( STRING (HString.mk_hstring str) )
# 303 "SExprLexer.ml"

  | 10 ->
# 132 "SExprLexer.mll"
        ( EOF )
# 308 "SExprLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_main_rec buf lexbuf __ocaml_lex_state

and scan_string buf start lexbuf =
    __ocaml_lex_scan_string_rec buf start lexbuf 20
and __ocaml_lex_scan_string_rec buf start lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 135 "SExprLexer.mll"
        ( () )
# 319 "SExprLexer.ml"

  | 1 ->
# 137 "SExprLexer.mll"
      (
        found_newline lexbuf (lexeme_len lexbuf - 2);
        scan_string buf start lexbuf
      )
# 327 "SExprLexer.ml"

  | 2 ->
# 142 "SExprLexer.mll"
      (
        found_newline lexbuf (lexeme_len lexbuf - 3);
        scan_string buf start lexbuf
      )
# 335 "SExprLexer.ml"

  | 3 ->
let
# 146 "SExprLexer.mll"
                                                 c
# 341 "SExprLexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 147 "SExprLexer.mll"
      (
        Buffer.add_char buf (char_for_backslash c);
        scan_string buf start lexbuf
      )
# 348 "SExprLexer.ml"

  | 4 ->
let
# 151 "SExprLexer.mll"
                   c1
# 354 "SExprLexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1)
and
# 151 "SExprLexer.mll"
                                 c2
# 359 "SExprLexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2)
and
# 151 "SExprLexer.mll"
                                               c3
# 364 "SExprLexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 3) in
# 152 "SExprLexer.mll"
      (
        let v = dec_code c1 c2 c3 in
        if v > 255 then (
          let { pos_lnum; pos_bol; pos_cnum; _ } = lexeme_end_p lexbuf in
          let msg =
            sprintf
              "Sexplib.Lexer.scan_string: \
               illegal escape at line %d char %d: `\\%c%c%c'"
              pos_lnum (pos_cnum - pos_bol - 3)
              c1 c2 c3 in
          failwith msg);
        Buffer.add_char buf (Char.chr v);
        scan_string buf start lexbuf
      )
# 381 "SExprLexer.ml"

  | 5 ->
let
# 166 "SExprLexer.mll"
                          c1
# 387 "SExprLexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2)
and
# 166 "SExprLexer.mll"
                                           c2
# 392 "SExprLexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 3) in
# 167 "SExprLexer.mll"
      (
        let v = hex_code c1 c2 in
        Buffer.add_char buf (Char.chr v);
        scan_string buf start lexbuf
      )
# 400 "SExprLexer.ml"

  | 6 ->
let
# 172 "SExprLexer.mll"
               c
# 406 "SExprLexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 173 "SExprLexer.mll"
      (
        Buffer.add_char buf '\\';
        Buffer.add_char buf c;
        scan_string buf start lexbuf
      )
# 414 "SExprLexer.ml"

  | 7 ->
# 179 "SExprLexer.mll"
      (
        found_newline lexbuf 0;
        Buffer.add_char buf lf;
        scan_string buf start lexbuf
      )
# 423 "SExprLexer.ml"

  | 8 ->
# 185 "SExprLexer.mll"
      (
        let ofs = lexeme_start lexbuf in
        let len = lexeme_end lexbuf - ofs in
        Buffer.add_substring buf lexbuf.lex_buffer ofs len;
        scan_string buf start lexbuf
      )
# 433 "SExprLexer.ml"

  | 9 ->
# 192 "SExprLexer.mll"
      (
        let msg =
          sprintf
            "Sexplib.Lexer.scan_string: unterminated string at line %d char %d"
            start.pos_lnum (start.pos_cnum - start.pos_bol)
        in
        failwith msg
      )
# 445 "SExprLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_scan_string_rec buf start lexbuf __ocaml_lex_state

and scan_block_comment buf locs lexbuf =
    __ocaml_lex_scan_block_comment_rec buf locs lexbuf 37
and __ocaml_lex_scan_block_comment_rec buf locs lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 203 "SExprLexer.mll"
      ( found_newline lexbuf 0; scan_block_comment buf locs lexbuf )
# 456 "SExprLexer.ml"

  | 1 ->
# 204 "SExprLexer.mll"
                                          ( scan_block_comment buf locs lexbuf )
# 461 "SExprLexer.ml"

  | 2 ->
# 206 "SExprLexer.mll"
      (
        let cur = lexeme_end_p lexbuf in
        let start = { cur with pos_cnum = cur.pos_cnum - 1 } in
        scan_string buf start lexbuf;
        Buffer.clear buf;
        scan_block_comment buf locs lexbuf
      )
# 472 "SExprLexer.ml"

  | 3 ->
# 214 "SExprLexer.mll"
    (
      let cur = lexeme_end_p lexbuf in
      let start = { cur with pos_cnum = cur.pos_cnum - 2 } in
      scan_block_comment buf (start :: locs) lexbuf
    )
# 481 "SExprLexer.ml"

  | 4 ->
# 220 "SExprLexer.mll"
      (
        match locs with
        | [_] -> ()
        | _ :: t -> scan_block_comment buf t lexbuf
        | [] -> assert false  (* impossible *)
      )
# 491 "SExprLexer.ml"

  | 5 ->
# 227 "SExprLexer.mll"
      (
        match locs with
        | [] -> assert false
        | { pos_lnum; pos_bol; pos_cnum; _ } :: _ ->
            let msg =
              sprintf "Sexplib.Lexer.scan_block_comment: \
                unterminated block comment at line %d char %d"
                pos_lnum (pos_cnum - pos_bol)
            in
            failwith msg
      )
# 506 "SExprLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_scan_block_comment_rec buf locs lexbuf __ocaml_lex_state

;;

# 239 "SExprLexer.mll"
 
  let main ?buf =
    let buf =
      match buf with
      | None -> Buffer.create 64
      | Some buf -> Buffer.clear buf; buf
    in
    main buf

# 522 "SExprLexer.ml"
