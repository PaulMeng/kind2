(define-pred greycounter

  ((reset Bool)
   (out Bool)
   (a Bool)
   (b Bool))
  
  (init 
   (and
    (= b false)
    (= a false)
    (= out (and a b))))
  
  (trans
   (and	
    (= (prime b) (and (not (prime reset)) a))
    (= (prime a) (and (not (prime reset)) (not b)))
    (= (prime out) (and (prime a) (prime b))))))

(define-pred intcounter
  
  ((reset Bool)
   (max Int :const)
   (out Bool)
   (t Int))

  (init
   (and
    (= t 0)
    (= out (= t 2))))
  
  (trans
   (and
    (= (prime t) (ite (or (prime reset) (= t max)) 0 (+ t 1)))
    (= (prime out) (= (prime t) 2)))))

(define-pred top
  ((reset Bool)
   (OK Bool)
   (b Bool)
   (d Bool)
   (g.a Bool)
   (g.b Bool)
   (i.t Int))

  (init
   (and
    (= OK (= b d))
    (greycounter.init reset b g.a g.b)
    (intcounter.init reset 3 d i.t)))

  (trans
   (and
    (= (prime OK) (= (prime b) (prime d)))
    (greycounter.trans 
     reset
     b
     g.a
     g.b
     (prime reset)
     (prime b)
     (prime g.a)
     (prime g.b))
    (intcounter.trans
     reset
     3
     d
     i.t
     (prime reset)
     (prime d)
     (prime i.t)))))

(check-prop ((OK OK)))
