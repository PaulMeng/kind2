node Rise 
  (I : bool)
returns 
  (O : bool);
let 
  O = false -> (not pre I) and I;
tel;


const inhibit_count_max = 2;

node PFS_Logic
  (riseTS, riseOSPF : bool;
   const Primary_Side : bool; 
   const PFS_Initial_Value : bool) 

returns 
  (PFS : bool);

var
  Start_to_Pilot_Flying, 
  Start_to_Inhibited, 
  Inhibited_to_Listening, 
  Inhibited_to_Inhibited, 
  Listening_to_Pilot_Flying, 
  Pilot_Flying_to_Inhibited : bool;

  state : subrange [1,5] of int;
  -- enum { St_Start, St_Inhibited,  St_Listening, St_Pilot_Flying};

  inhibit_count : subrange [0, inhibit_count_max] of int;

  inhibit_count_bounded : bool;
  pfs_state_consistency : bool;

  state_bounded : bool;

const St_Inhibited = 2;
const St_Listening = 3;
const St_Pilot_Flying = 4;
const St_Start = 1;
const St_Stop = 5;


-- const St_Inhibited = 2;
-- const St_Listening = 3;
-- const St_Pilot_Flying = 4;
-- const St_Start = 1;
-- const St_Stop = 5;

let
 
  Start_to_Pilot_Flying = 
    ((St_Start -> pre(state)) = St_Start) and Primary_Side;

  Start_to_Inhibited = 
    ((St_Start -> pre(state)) = St_Start) and (not Primary_Side);

  Inhibited_to_Listening = 
    ((St_Start -> pre(state)) = St_Inhibited) and 
      (0 -> pre(inhibit_count)) >= inhibit_count_max;
  
  Inhibited_to_Inhibited = 
    ((St_Start -> pre(state)) = St_Inhibited) and 
      not Inhibited_to_Listening;

  Listening_to_Pilot_Flying = 
    ((St_Start -> pre(state)) = St_Listening) and riseTS;

  Pilot_Flying_to_Inhibited = 
    ((St_Start -> pre(state)) = St_Pilot_Flying) and riseOSPF;

  state =
    if
      Inhibited_to_Inhibited or 
      Pilot_Flying_to_Inhibited or 
      Start_to_Inhibited
    then 
      St_Inhibited 
    else if 
      Inhibited_to_Listening 
    then 
      St_Listening
    else if 
      Listening_to_Pilot_Flying or 
      Start_to_Pilot_Flying 
    then 
      St_Pilot_Flying 
    else 
      (St_Start -> pre(state));
  
  PFS = 
    if 
      Listening_to_Pilot_Flying 
    then 
      true
    else if 
      Pilot_Flying_to_Inhibited 
    then 
      false
    else if 
      Start_to_Pilot_Flying 
    then 
      true
    else if 
      Start_to_Inhibited 
    then 
      false
    else 
      PFS_Initial_Value -> pre(PFS);
  
  inhibit_count = 
    if 
      Inhibited_to_Inhibited 
    then 
      (0 -> pre(inhibit_count)) + 1
    else if 
      Pilot_Flying_to_Inhibited 
    then 
      0
    else if 
      Start_to_Inhibited 
    then 
      0
    else 
      0 -> pre(inhibit_count);
  
  pfs_state_consistency = 
    not (state = St_Start) => (PFS = (state = St_Pilot_Flying));
  
  --%PROPERTY pfs_state_consistency;

  -- Proved as property before 
  assert pfs_state_consistency;
       
  inhibit_count_bounded = 
    inhibit_count >= 0 and inhibit_count <= inhibit_count_max;
  
  --%PROPERTY inhibit_count_bounded;

  -- Proved as property before 
  assert inhibit_count_bounded;

  state_bounded = state >= St_Start and state < St_Stop;

  -- --%PROPERTY state_bounded;

  -- Proved as property before 
  assert state_bounded;
  	
tel;

node PFS_Side
  (TS, OSPF : bool;
   const Primary_Side : bool; 
   const PFS_Initial_Value : bool)

returns 
  (PFS : bool);

var
  PFSL_PFS : bool;
  riseTS_O : bool;
  riseOSPF_O : bool;
  
let

  PFSL_PFS =
    PFS_Logic(riseTS_O, riseOSPF_O, Primary_Side, PFS_Initial_Value);

  riseTS_O = Rise(TS);

  riseOSPF_O = Rise(OSPF);

  PFS = PFSL_PFS;

tel;

node Cross_Channel_Bus
  (I : bool;
   const O_Initial_Value : bool; 
   const prev_I_Initial_Value : bool)

returns
  (O : bool);

var
  prev_I : bool;
  Start_to_Step : bool;
  Step_to_Step : bool;
  state_bounded : bool;

  state : subrange [1,3] of int;
  -- state : enum { St_Step, St_Start };

const St_Step = 2;
const St_Start = 1;
const St_Stop = 3;

let

  Start_to_Step = (St_Start -> pre(state)) = St_Start;

  Step_to_Step = (St_Start -> pre(state)) = St_Step;

  state = 
    if 
      Start_to_Step or Step_to_Step 
    then 
      St_Step 
    else 
      (St_Start -> pre(state));

  prev_I = 
    if Start_to_Step then I
    else if Step_to_Step then I
         else prev_I_Initial_Value -> pre(prev_I);

  O = 
    if 
      Start_to_Step 
    then 
      prev_I_Initial_Value -> pre(prev_I)
    else if 
      Step_to_Step 
    then 
      prev_I_Initial_Value -> pre(prev_I)
    else 
      O_Initial_Value -> pre(O);
      
  -- state_bounded = state >= St_Start and state < St_Stop;
  
  -- --%PROPERTY state_bounded;
  
tel;

node PFS
  (TS, CLK1, CLK3, CLK2, CLK4 : bool) 
returns 
  (LPFS, RPFS : bool);

var
  RL_O : bool;
  RS_PFS : bool;
  LR_O : bool;
  LS_PFS : bool;

let

  LS_PFS = 
    condact(CLK1, PFS_Side(TS, RL_O, true, true), true);
    -- PFS_Side(TS, RL_O, true, true);

  RS_PFS = 
    condact(CLK3, PFS_Side(TS, LR_O, false, false), false);
    -- PFS_Side(TS, LR_O, false, false);

  LR_O = 
    condact(CLK2, Cross_Channel_Bus (LS_PFS, true, true), true);
    -- Cross_Channel_Bus (LS_PFS, true, true);

  RL_O = 
    condact(CLK4, Cross_Channel_Bus (RS_PFS, false, false), false);
    -- Cross_Channel_Bus (RS_PFS, false, false);

  LPFS = LS_PFS;

  RPFS = RS_PFS;
  
tel;



node qs_dfa (p, q : bool) returns (ok : bool);

var
  r : subrange [-2, 2] of int;

let

  ok = not (((0 -> pre r) = 2 and p) or ((0 -> pre r) = -2 and q));
  
  r = if p and q then 0 
      else if p then (if (0 -> pre r) < 0 then 1 else ((0 -> pre r)) + 1)
           else if q then (if (0 -> pre r) > 0 then -1 else ((0 -> pre r)) - 1)
                else (0 -> pre r);

tel;

node calendar
  (CLK1 : bool; CLK3 : bool; CLK2 : bool; CLK4 : bool)
returns
  (ok : bool);
let
  ok = 
    qs_dfa(CLK1, CLK3) and
      qs_dfa(CLK1, CLK2) and
        qs_dfa(CLK1, CLK4) and
          qs_dfa(CLK3, CLK2) and
            qs_dfa(CLK3, CLK4) and
              qs_dfa(CLK2, CLK4);
tel;


node PRESSED (p : bool) returns (b : bool);
let
  b = false -> (not pre p and p);
tel;

node PRESSED_SEEN (p, c : bool) returns (b : bool);
let
  b = false -> (not pre p and pre c) and (p and c);
tel;

node CHANGED (p : bool) returns (b : bool);
let
  b = false ->  not (p = pre p);
tel;
  
node ticked(c: bool) returns (b: bool);
let 
  b = (false -> pre b) or c;
tel;
  
node false_longer_than (p: bool; const n: int) returns (ok: bool);

var
  c: int;

let

  c = if p then 0 else (1 -> pre c + 1);
  
  ok = c > n;

tel;

node main
  (TS, CLK1, CLK3, CLK2, CLK4 : bool)
returns 
  (LPFS, RPFS : bool);
  
var
  all_clocks_ticked_once : bool;
  clocks_are_synchronous : bool;
  quiescent : bool;
  clocks_are_quasi_synchronous : bool;
 
  at_least_one_pilot_flying_side : bool;
  agree_on_pilot_flying_side : bool;
  transfer_switch_changes_sides : bool;
  left_side_initial_pilot_flying_side : bool;
  pilot_flying_side_unchanged_unless_transfer_switch_pressed : bool;

let

  --%MAIN
  clocks_are_quasi_synchronous = calendar(CLK1, CLK3, CLK2, CLK4);
  
  assert clocks_are_quasi_synchronous;
  assert (CLK1 or CLK3 or CLK2 or CLK4);

  LPFS, RPFS = PFS(TS, CLK1, CLK3, CLK2, CLK4);

  all_clocks_ticked_once = 
    ticked(CLK1) and ticked(CLK2) and ticked(CLK3) and ticked(CLK4);

  clocks_are_synchronous = 
    CLK1 = CLK2 and CLK2 = CLK3 and CLK3 = CLK4;
  
  quiescent = 
    condact(CLK1, false_longer_than(PRESSED(TS), 6), false) and
      condact(CLK2, false_longer_than(PRESSED(TS), 6), false) and
        condact(CLK3, false_longer_than(PRESSED(TS), 6), false) and
          condact(CLK4, false_longer_than(PRESSED(TS), 6), false);
     
  at_least_one_pilot_flying_side = LPFS or RPFS;   
  
  agree_on_pilot_flying_side = quiescent => LPFS = not RPFS;
     
  transfer_switch_changes_sides = 
    true ->
    pre quiescent => 
      (not pre LPFS and PRESSED_SEEN(TS,CLK1) => LPFS) and 
        (not pre RPFS and PRESSED_SEEN(TS,CLK3) => RPFS);

  left_side_initial_pilot_flying_side = LPFS -> true;
   
  pilot_flying_side_unchanged_unless_transfer_switch_pressed = 
    quiescent => not (CHANGED(RPFS) or CHANGED(LPFS));   
       
  --%PROPERTY at_least_one_pilot_flying_side;
  --%PROPERTY agree_on_pilot_flying_side;
  --%PROPERTY transfer_switch_changes_sides;
  --%PROPERTY left_side_initial_pilot_flying_side;
  --%PROPERTY pilot_flying_side_unchanged_unless_transfer_switch_pressed;

tel;
