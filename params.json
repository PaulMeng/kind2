<<<<<<< HEAD
{"name":"Kinder","tagline":"Multi-engine SMT-based automatic model checker for safety properties of Lustre programs","body":"Kinder\r\n======\r\n\r\nA multi-engine, parallel, SMT-based automatic model checker for safety properties of Lustre programs. \r\n\r\nKind2 takes as input a Lustre file annotated with properties to prove invariant (see [Lustre syntax](doc/Lustre.md)), and outputs which of the properties are true for all inputs, as well as an input sequence for those properties that are falsified. To ease processing by front-end tools, Kind2 can output its results in [XML format](doc/XML.md).\r\n\r\nKind2 runs a process for bounded model checking (BMC), a process for k-induction, and a proces for IC3 in parallel on all properties simultaneously. It incrementally outputs counterexamples to properties as well as properties proved invariant.\r\n\r\nThe following command-line options control its operation (run ```kind2 --help``` for a full list).\r\n\r\n- ```--enable {BMC|IND|PDR}``` Select model checking engines\r\n \r\n  By default, all three model checking engines are run in parallel. Give any combination of ```--enable BMC```, ```--enable IND``` and ```--enable PDR``` to select which engines to run. The option ``--enable BMC`` alone will not be able to prove properties valid, choosing ``--enable IND`` only will not produce any results. Any other combination is sound and complete.\r\n\r\n- ```--timeout_wall SECS``` Run for SECS seconds of wallclock time\r\n\r\n- ```--timeout_virtual SECS``` Run for SECS of CPU time\r\n \r\n- ```--smtsolver {Z3|CVC4|mathsat5} ``` Select SMT solver\r\n\r\n  The default is ```Z3```, but see options of the ```./build.sh``` script to override at compile-time\r\n  \r\n- ```--z3_bin PROGRAM``` Executable for Z3\r\n- ```--cvc4_bin PROGRAM``` Executable for CVC4\r\n- ```--mathsat5_bin PROGRAM``` Executable for MathSat5\r\n\r\n- ```--bmc_max K``` Run bounded model checking for up to ```K``` steps\r\n\r\n- ```-v``` Output informational messages\r\n- ```-xml``` Output in XML format\r\n\r\n\r\nRequirements\r\n============\r\n\r\n- Linux or Mac OS X\r\n- OCaml 4.01 or later\r\n- A supported SMT solver\r\n - [Z3](http://z3.codeplex.com) (recommended), \r\n - [CVC4](http://cvc4.cs.nyu.edu), (must use ```--pdr_tighten_unsat_core false```) or\r\n - [MathSat5](http://mathsat.fbk.eu/)\r\n\r\nBuilding and installing\r\n=======================\r\n\r\nThe commands\r\n\r\n    ./autogen.sh\r\n    ./build.sh\r\n    make install\r\n\r\nwill configure and build ZeroMQ, CZMQ, the OCaml bindings and Kind 2 and install the binary `kind2` into `/usr/local/bin`. Call `./build.sh --prefix=<path>` to install the Kind 2 binary into `<path>/bin` instead. If you need to pass options to the configure scripts of any of ZeroMQ, CZMQ, the OCaml bindings or Kind 2, add these to the `build.sh` call. Use `./configure --help` after `autogen.sh` to see all available options.\r\n\r\nYou need a supported SMT solver, at the momemt either CVC4 or Z3 on your path. Either one or both will be picked up by the `build.sh` command. Alternatively, you can give one or both of the options `--with-cvc4=<cvc4-executable>` and `--with-z3=<z3-executable>`. Z3 will be chosen as default if it is available, you can override this with the option `--with-default-smtsolver=cvc4`.\r\n\r\nZeroMQ, CZMQ and ocamlczmq are included\r\n=======================================\r\n\r\nThe ocamlczmq binding is included as a subtree. Nothing is needed to work with the sources, but in order to update ocamlczmq the git-subtree plugin is required. It is part of git, but not installed by default: get the git-subtree script and put it anywhere in the your path.\r\n\r\nTo update ZeroMQ and CZMQ go to the ocamlczmq repository.\r\n\r\nTo pull changes from the ocamlczmq repository do \r\n\r\n    git subtree pull --prefix=ocamlczmq --squash https://github.com/kind-mc/ocamlczmq.git master\r\n\r\nFor the record, initially I did \r\n\r\n    git subtree add --prefix=ocamlczmq --squash https://github.com/kind-mc/ocamlczmq.git master\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
=======
{"name":"Kind 2","tagline":"Multi-engine SMT-based automatic model checker for safety properties of Lustre programs","body":"Kind 2\r\n======\r\n\r\nA multi-engine, parallel, SMT-based automatic model checker for safety properties of Lustre programs. \r\n\r\nKind2 takes as input a Lustre file annotated with properties to prove invariant (see [Lustre syntax](doc/Lustre.md)), and outputs which of the properties are true for all inputs, as well as an input sequence for those properties that are falsified. To ease processing by front-end tools, Kind2 can output its results in [XML format](doc/XML.md).\r\n\r\nKind2 runs a process for bounded model checking (BMC), a process for k-induction, and a proces for IC3 in parallel on all properties simultaneously. It incrementally outputs counterexamples to properties as well as properties proved invariant.\r\n\r\nThe following command-line options control its operation (run ```kind2 --help``` for a full list).\r\n\r\n```--enable {BMC|IND|PDR}``` Select model checking engines\r\n   \r\nBy default, all three model checking engines are run in parallel. Give any combination of ```--enable BMC```, ```--enable IND``` and ```--enable PDR``` to select which engines to run. The option ``--enable BMC`` alone will not be able to prove properties valid, choosing ``--enable IND`` only will not produce any results. Any other combination is sound and complete.\r\n\r\n```--timeout_wall SECS``` Run for SECS seconds of wallclock time\r\n\r\n```--timeout_virtual SECS``` Run for SECS of CPU time\r\n \r\n```--smtsolver {Z3|CVC4|mathsat5} ``` Select SMT solver\r\n\r\nThe default is ```Z3```, but see options of the ```./build.sh``` script to override at compile-time\r\n  \r\n```--z3_bin PROGRAM``` Executable for Z3\r\n\r\n```--cvc4_bin PROGRAM``` Executable for CVC4\r\n\r\n```--mathsat5_bin PROGRAM``` Executable for MathSat5\r\n\r\n```--bmc_max K``` Run bounded model checking for up to ```K``` steps\r\n\r\n```-v``` Output informational messages\r\n\r\n```-xml``` Output in XML format\r\n\r\n\r\nRequirements\r\n============\r\n\r\n- Linux or Mac OS X\r\n- OCaml 4.01 or later\r\n- A supported SMT solver\r\n - [Z3](http://z3.codeplex.com) (recommended), \r\n - [CVC4](http://cvc4.cs.nyu.edu), (must use ```--pdr_tighten_unsat_core false```) or\r\n - [MathSat5](http://mathsat.fbk.eu/)\r\n\r\nBuilding and installing\r\n=======================\r\n\r\nIf you got the sources from the Github repository, you need to run first\r\n\r\n    ./autogen.sh\r\n\r\nIn any case, the commands\r\n\r\n    ./build.sh\r\n    make install\r\n\r\nwill configure and build ZeroMQ, CZMQ, the OCaml bindings and Kind 2 and install the binary `kind2` into `/usr/local/bin`. Call `./build.sh --prefix=PATH` to install the Kind 2 binary into `PATH/bin` instead. If you need to pass options to the configure scripts of any of ZeroMQ, CZMQ, the OCaml bindings or Kind 2, add these to the `build.sh` call. Use `./configure --help` after `autogen.sh` to see all available options.\r\n\r\nYou need a supported SMT solver, at the momemt either Z3, CVC4 or MathSat5 on your path when running `kind2`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
>>>>>>> b7effee8ee5a2ff2d4dfbde27afdd72e889eb523
